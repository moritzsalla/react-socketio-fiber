{"ast":null,"code":"var _jsxFileName = \"/Users/moritzsalla/Documents/GitHub/react-socketio-fiber/app/src/Scene.js\";\nimport React, { useRef } from 'react';\nimport { Canvas, useThree, useRender, apply } from 'react-three-fiber';\nimport Particle from './Particle';\nimport { createGlobalStyle } from 'styled-components';\nimport styled from 'styled-components';\nimport { OrbitControls } from '../resources/controls/OrbitControls';\napply({\n  OrbitControls\n});\n\nfunction Controls(props) {\n  const ref = useRef();\n  const {\n    camera\n  } = useThree();\n  useRender(() => ref.current.obj.update());\n  return /*#__PURE__*/React.createElement(\"orbitControls\", Object.assign({\n    ref: ref,\n    args: [camera]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }));\n}\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    min-height: 100vh;\n    min-width: 100vw;\n    margin: 0;\n    padding: 0;\n  }\n\n  canvas {\n      height: 100vh;\n      width: 100vw;\n      position: fixed:\n      top: 0;\n      left: 0;\n  }\n`;\nconst HUD = styled.span`\n  position: fixed;\n  top: 0;\n  left: 0;\n  margin: 1rem;\n  font-family: sans-serif;\n  font-size: 3rem;\n`;\n\nclass Scene extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      particles: 0\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({\n      particles: props.users\n    });\n  }\n\n  randCoord() {\n    let x = Math.random() * 2 - 1;\n    let y = Math.random() * 2 - 1;\n    let z = Math.random() * 2 - 1;\n    return [x, y, z];\n  }\n\n  randColor() {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    return [r, g, b];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(HUD, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, this.state.particles, \" Active Users\"), /*#__PURE__*/React.createElement(Canvas, {\n      pixelRatio: window.devicePixelRatio ? window.devicePixelRatio : 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Controls, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"pointLight\", {\n      position: [10, 10, 10],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), [...Array(this.state.particles)].map((e, i) => /*#__PURE__*/React.createElement(Particle, {\n      key: i,\n      position: this.randCoord(),\n      color: this.randColor(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/moritzsalla/Documents/GitHub/react-socketio-fiber/app/src/Scene.js"],"names":["React","useRef","Canvas","useThree","useRender","apply","Particle","createGlobalStyle","styled","OrbitControls","Controls","props","ref","camera","current","obj","update","GlobalStyle","HUD","span","Scene","Component","constructor","state","particles","componentWillReceiveProps","setState","users","randCoord","x","Math","random","y","z","randColor","r","floor","g","b","render","window","devicePixelRatio","Array","map","e","i"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport { Canvas, useThree, useRender, apply } from 'react-three-fiber';\nimport Particle from './Particle';\nimport { createGlobalStyle } from 'styled-components';\nimport styled from 'styled-components';\nimport { OrbitControls } from '../resources/controls/OrbitControls';\n\napply({ OrbitControls });\n\nfunction Controls(props) {\n  const ref = useRef();\n  const { camera } = useThree();\n  useRender(() => ref.current.obj.update());\n  return <orbitControls ref={ref} args={[camera]} {...props} />;\n}\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    min-height: 100vh;\n    min-width: 100vw;\n    margin: 0;\n    padding: 0;\n  }\n\n  canvas {\n      height: 100vh;\n      width: 100vw;\n      position: fixed:\n      top: 0;\n      left: 0;\n  }\n`;\n\nconst HUD = styled.span`\n  position: fixed;\n  top: 0;\n  left: 0;\n  margin: 1rem;\n  font-family: sans-serif;\n  font-size: 3rem;\n`;\n\nclass Scene extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      particles: 0,\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.setState({ particles: props.users });\n  }\n\n  randCoord() {\n    let x = Math.random() * 2 - 1;\n    let y = Math.random() * 2 - 1;\n    let z = Math.random() * 2 - 1;\n    return [x, y, z];\n  }\n\n  randColor() {\n    let r = Math.floor(Math.random() * 255);\n    let g = Math.floor(Math.random() * 255);\n    let b = Math.floor(Math.random() * 255);\n    return [r, g, b];\n  }\n\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <HUD>{this.state.particles} Active Users</HUD>\n\n        <Canvas\n          pixelRatio={window.devicePixelRatio ? window.devicePixelRatio : 1}\n        >\n          <Controls />\n\n          <ambientLight />\n          <pointLight position={[10, 10, 10]} />\n\n          {[...Array(this.state.particles)].map((e, i) => (\n            <Particle\n              key={i}\n              position={this.randCoord()}\n              color={this.randColor()}\n            />\n          ))}\n        </Canvas>\n      </>\n    );\n  }\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}